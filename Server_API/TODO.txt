## 약점 / 개선이 필요한 부분

게임 스트리밍 수준으로 가려면 아래 항목들을 특히 신경써야 함. 현재 코드 기반에서 보완해야 할 부분들이 있어:

| 이슈                    | 설명                                                                                                                                       |
| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------- |
| **지연(latency)**       | 화면 캡처 → 인코딩 → 전송 → 디코딩 → 렌더링 과정에서의 지연이 문제됨. 게임용이라면 30fps 이상 / 지연 최소화가 중요함.                                                               |
| **비디오 인코딩 및 하드웨어 가속** | CPU 기반 인코딩이면 부하가 매우 클 수 있음. GPU 또는 OS 지원 하드웨어 인코딩 / 디코딩을 활용해야 함. 예: Windows의 Media Foundation, NVENC, AMD VCE, 또는 DirectX / DXGI 등의 API. |
| **네트워크 대역폭 최적화**      | 프레임 압축, 차분 프레임(difference only), 컬러 포맷(예: YUV), 전송 포맷, 패킷 손실 보정 등이 필요함.                                                                  |
| **오디오 + 비디오 동기화**     | 비디오와 오디오가 어긋나면 체감 품질이 매우 나빠짐.                                                                                                            |
| **입력 처리의 정확성 및 지연**   | 마우스 클릭 / 키보드 / 터치 입력 등이 데스크톱에 적절히 제때 반영되어야 함. 가령 Windows의 입력 시뮬레이션 방식(예: SendInput) 등이 이슈가 될 수 있음.                                       |
| **보안**                | 통신 암호화, 인증, 접근 제어 등이 필요함 (특히 인터넷을 통한 연결 시).                                                                                              |
| **호환성**               | 다양한 그래픽 카드 / OS 버전 / 드라이버 / 클라이언트 Android 버전 등에 대응해야 함. 해상도 / 화면 비율 / DPI 등.                                                             |

---

## 개선 제안

네가 Parsec / Moonlight 같은 수준으로 구현하려면, EchoLink 구조를 기반으로 아래와 같은 개선 / 추가 사항을 고려해 보면 좋겠어:

1. **효율적인 화면 캡처 방식**

   * Windows에서는 `Desktop Duplication API (DXGI)` 사용 → GPU에서 화면을 캡처하여 효율적임.
   * 게임일 경우 DirectX / Vulkan / OpenGL 렌더링 결과를 직접 읽거나 또는 미러링 인터페이스 활용.

2. **하드웨어 가속 인코딩**

   * NVIDIA NVENC, AMD AMF, Intel QuickSync 등의 인코더 사용
   * 또는 윈도우에서 제공하는 `Media Foundation` 또는 `DXVA` 등을 활용

3. **비디오 스트리밍 프로토콜 개선**

   * RTP/RTCP, WebRTC 또는 비슷한 low-latency 프로토콜 고려
   * UDP 기반 전송 + 손실 복구, 또는 QUIC / SRT 같은 프로토콜

4. **네트워크 적응형 스트리밍**

   * 클라이언트 네트워크 환경(지연, 손실, 대역폭)을 측정하고, 비트레이트 / 해상도 /프레임률 동적으로 조정

5. **버퍼링 / 지연 최소화 전략**

   * 지연을 줄이기 위해 가능한 버퍼를 작게 유지
   * 화면 프레임 전송 빈도 조절
   * 클라이언트 렌더링 파이프라인 최적화

6. **입력 전달 최적화**

   * 터치 이벤트 → 마우스/윈도우 입력 변환
   * 키보드 / 조이스틱 입력 지원
   * 중복/불필요 입력 필터링

7. **오디오 처리**

   * 사운드 캡처 → 인코딩 → 스트리밍
   * 비디오와 함께 지연 제어
   * 클라이언트에서 사운드 재생

8. **보안 / 인증 / 암호화**

   * SSL/TLS 또는 DTLS 같은 보안 채널
   * 사용자 인증, 권한 관리
   * 네트워크 상의 중간자 공격 / 패킷 스니핑 방지

9. **해상도 및 품질 선택 옵션**

   * 사용자가 원하는 해상도 / 품질 선택 가능하게
   * 낮은 자원의 모바일 기기를 위한 저사양 옵션 제공

10. **멀티 쓰레딩 / 비동기 처리**

    * 캡처, 인코딩, 네트워크 송수신, 입력 처리 등을 별도의 쓰레드 또는 비동기로 처리하여 병목 최소화

---

