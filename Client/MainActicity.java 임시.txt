package com.echolink.client;

import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "MainActivity";
    // ⚠️ 중요: 이 주소는 실제 데스크톱 서버 PC의 공인 IP 주소 또는 로컬 IP 주소로 변경해야 합니다.
    private static final String AUTH_SERVER_URL = "http://192.168.0.1:8080";

    private FirebaseAuth mAuth;
    private GoogleSignInClient mGoogleSignInClient;
    private Button loginButton;
    private String firebaseIdToken;

    // Google 로그인 결과를 처리할 ActivityResultLauncher
    private final ActivityResultLauncher<Intent> googleSignInLauncher = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == RESULT_OK) {
                    Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(result.getData());
                    try {
                        // Google 로그인 성공
                        GoogleSignInAccount account = task.getResult(ApiException.class);
                        firebaseAuthWithGoogle(account.getIdToken());
                    } catch (ApiException e) {
                        // Google 로그인 실패
                        Log.w(TAG, "Google sign in failed", e);
                        Toast.makeText(this, "Google 로그인에 실패했습니다.", Toast.LENGTH_SHORT).show();
                    }
                }
            });

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mAuth = FirebaseAuth.getInstance();

        // Google 로그인 옵션 설정 (웹 클라이언트 ID 요청)
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id)) // Firebase 프로젝트의 웹 클라이언트 ID
                .requestEmail()
                .build();

        mGoogleSignInClient = GoogleSignIn.getClient(this, gso);

        loginButton = findViewById(R.id.login_button);
        loginButton.setOnClickListener(v -> signInWithGoogle());

        // 기존 로그인 정보 확인
        FirebaseUser currentUser = mAuth.getCurrentUser();
        updateUI(currentUser);
    }

    private void signInWithGoogle() {
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        googleSignInLauncher.launch(signInIntent);
    }

    private void firebaseAuthWithGoogle(String idToken) {
        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(this, task -> {
                    if (task.isSuccessful()) {
                        // Firebase 인증 성공
                        FirebaseUser user = mAuth.getCurrentUser();
                        Toast.makeText(this, "인증에 성공했습니다.", Toast.LENGTH_SHORT).show();
                        updateUI(user);
                    } else {
                        // Firebase 인증 실패
                        Toast.makeText(this, "인증에 실패했습니다.", Toast.LENGTH_SHORT).show();
                        updateUI(null);
                    }
                });
    }

    private void updateUI(FirebaseUser user) {
        if (user != null) {
            loginButton.setVisibility(View.GONE);
            // 인증 성공 후, Firebase ID 토큰을 가져와 서버와 통신 시작
            user.getIdToken(true).addOnCompleteListener(task -> {
                if (task.isSuccessful()) {
                    this.firebaseIdToken = task.getResult().getToken();
                    Log.d(TAG, "Firebase ID Token: " + this.firebaseIdToken);
                    // TODO: 이 토큰을 사용하여 서버에 기기 목록을 요청하는 로직 호출
                    // 예: fetchDeviceList();
                } else {
                    Toast.makeText(this, "토큰 발급에 실패했습니다.", Toast.LENGTH_SHORT).show();
                }
            });
        } else {
            loginButton.setVisibility(View.VISIBLE);
        }
    }
}
