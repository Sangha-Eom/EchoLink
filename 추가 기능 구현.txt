### **1. 스트리밍 서버 (Streaming Server)**

- **하드웨어 가속 인코딩 활용**: 현재 CPU 기반의 H.264 인코딩을 사용하고 계실 텐데, **NVIDIA의 NVENC나 Intel의 QSV 같은 GPU 하드웨어 가속**을 사용하면 CPU 점유율을 획기적으로 낮출 수 있습니다. 이는 저사양 PC에서도 원활한 스트리밍을 가능하게 하고, 게임과 같이 CPU 사용량이 높은 프로그램을 스트리밍할 때 지연 시간을 최소화하는 데 결정적인 역할을 합니다. JavaCV의 FFmpeg 래퍼에서 관련 옵션을 활성화할 수 있는지 확인해보시는 것을 추천합니다.
- **동적 비트레이트 조절 (Adaptive Bitrate)**: 현재 비트레이트 변경 이벤트를 수신하는 기능이 있다고 하셨는데, 이를 자동화하여 네트워크 상태에 따라 **서버가 스스로 비트레이트를 조절**하게 만들 수 있습니다. 클라이언트로부터 주기적으로 패킷 손실률(Packet Loss)이나 핑(RTT) 정보를 피드백 받아, 네트워크가 불안정할 때는 비트레이트를 낮추고, 안정적일 때는 높여서 언제나 최적의 화질과 안정성을 제공할 수 있습니다.
- **프로토콜 고도화 (UDP -> SRT/WebRTC)**: 순수 UDP는 빠르지만 패킷 손실에 취약합니다. 스트리밍의 안정성을 한 단계 높이기 위해 **SRT(Secure Reliable Transport)** 프로토콜 도입을 고려해볼 수 있습니다. SRT는 UDP의 낮은 지연 시간을 유지하면서도 패킷 손실 복구, 지터 방지 등 신뢰성 있는 전송을 지원하여 불안정한 네트워크 환경에서도 훨씬 안정적인 스트리밍을 제공합니다. 장기적으로는 NAT Traversal, 보안 등이 통합된 **WebRTC** 도입도 훌륭한 선택지가 될 수 있습니다.


### **2. 인증 웹 서버 (Authentication Web Server)**

- **Refresh Token 도입**: 현재 발급하는 JWT(Access Token)는 보안을 위해 유효 기간이 짧을 것입니다. 이 토큰이 만료될 때마다 사용자가 다시 로그인해야 한다면 불편할 수 있습니다. **Refresh Token**을 함께 발급하는 로직을 추가하면, Access Token이 만료되었을 때 클라이언트가 Refresh Token을 사용해 새로운 Access Token을 자동으로 재발급받을 수 있어 사용자 경험을 크게 향상시킬 수 있습니다.
- **API 문서화**: 앞으로 클라이언트 종류가 늘어나거나 다른 개발자와 협업할 경우를 대비해, **Swagger(OpenAPI)** 같은 도구를 이용해 현재 구현된 API(기기 코드 발급, JWT 발급 등)를 문서화해두면 유지보수와 확장이 훨씬 용이해집니다.

- 로그인 인증(로컬 서버)에서 취소 시 다시 로그인 버튼으로 돌아와 활성화 시키기


### **3. 안드로이드 클라이언트 (Android Client)**

- **성능 최적화**:
    - **하드웨어 가속 디코딩**: ExoPlayer는 기본적으로 하드웨어 디코딩을 우선하지만, 스트림 수신 시 **H.264 하드웨어 디코딩이 확실히 활성화**되는지 확인하는 것이 중요합니다. 이는 배터리 소모를 줄이고, 고해상도/고프레임 영상도 부드럽게 재생하는 데 필수적입니다.
    - **저지연 렌더링**: ExoPlayer 설정에서 버퍼링 시간을 최소화하는 등 **저지연(Low-latency) 모드** 관련 옵션을 튜닝하여 실제 PC 화면과 안드로이드 화면 간의 차이를 최대한 줄이는 작업이 필요합니다.
- **사용자 경험(UX) 고도화**:
    - **다양한 제어 모드**: 화면 터치 이벤트를 마우스 제어로 변환할 때, **'트랙패드 모드'**(화면 전체를 노트북 터치패드처럼 사용)와 **'직접 터치 모드'**(화면을 터치한 곳이 바로 클릭됨)를 모두 제공하고 사용자가 선택할 수 있게 하면 편의성이 크게 증가합니다.
    - **제스처 지원**: 두 손가락으로 스크롤, 핀치 투 줌(Pinch-to-zoom)으로 화면 확대/축소, 길게 눌러 마우스 우클릭 등 직관적인 제스처를 추가하면 훨씬 편리한 원격 제어가 가능해집니다.
- **보안 강화**:
    - `SharedPreferences`에 JWT를 저장하는 것은 일반적이지만, 보안을 강화하기 위해 암호화된 저장을 지원하는 **`EncryptedSharedPreferences`*를 사용하는 것을 강력히 권장합니다. 루팅된 기기 등에서 토큰이 유출될 위험을 줄여줍니다.

- **안드로이드 기능 구현**:
## 연결 중
- 조작
    - 3Finger Touch : 키보드 띄우기
    - 2Finger Touch : 우클릭
    - 1Finger Touch : 좌클릭
    - drag : 마우스 움직이기
- 메뉴
    - 키 배치
        - 버튼 생성
        - 버튼에 특정 키 지정
        - 버튼 크기 조절
        - 버튼 위치 조절
    - 프리셋
        - 기존에 저장한 ‘키 배치’ 불러오기
    - 기본 제공 UI
        - 조이스틱, 패드 등
## 연결 전
- 메뉴(조절)
    - 프레임 상한선
    - 해상도
    - 패킷 전송 속도(화질, 반응 속도)
- 연결
    - 로그인 인증
    - 기기 연결

~~~
