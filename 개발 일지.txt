### 일지
~~
25.08.27
- 보안 관련 하드코딩 구현 수정하기(applicaton.yml 통합)
- 기기 등록 구현 코드
- 데스크탑(Server) 어플로 전환(.exe) <Ongoing>
ㄴ JavaFX

다음 단계: Gemini Pro 단계별 어플 전환
- 데스크탑(Server) 어플로 전환(.exe)

~~
25.08.28
- 데스크탑 어플로 전환(.exe) 미완
ㄴ 서버와 인증서버 한 번에 실행하도록 구조 개편
ㄴ 나중에 해야할 사항 
  ㄴ 2단계: Fat JAR 빌드(사지방 CMD 이슈)
  ㄴ 4단계: 네이티브 빌드(.exe) (사지방CMD 이슈)

다음 단계: Gemini Pro 단계별 로그인 구조 변환
- Parsec과 같이 GUI를 통한 로그인 인증 창 구현 중 4항목

~~
25.08.29
- GUI를 통한 로그인 인증 창 구현 완료
 단 임시로 소설로그인 구현 중단 후 테스트용 데이터베이스 구현 완료
ㄴ> FireBase와 FireStore이용하여 영구 사용자 정보 기억 및 구글 소설 로그인 재구현

다음 단계: Gemini Pro 단계별 소설 로그인 사용자 관리 구현

~~
25.08.31
- 소설 로그인으로 전환 완료(Firebase 데이터베이스 사용)

다음 단계: 아래 흐름대로 로그인 토큰 인증 방식 전환
표준적인 Firebase Custom Token 방식으로 전환하는 것을 강력히 권장합니다.

추천 흐름:

(JavaFX): 이전 단계의 코드(flow.newTokenRequest...)를 통해 Google의 Credential을 성공적으로 받아옵니다.

(JavaFX): 이 Credential에서 Google 사용자의 **ID Token**을 추출합니다.

(JavaFX → 서버): 이 **Google ID Token**을 Spring Boot 서버의 특정 API 엔드포인트(예: /api/auth/firebase-signin)로 전송합니다.

(서버): 서버는 Firebase Admin SDK를 사용하여 수신된 Google ID Token이 유효한지 검증합니다.

(서버): 검증이 성공하면, Admin SDK는 해당 사용자에 대한 Firebase Custom Token을 생성하여 클라이언트(JavaFX)에게 다시 돌려줍니다.

(JavaFX): 최종적으로 FirebaseAuth.getInstance().signInWithCustomToken(customToken)을 호출하여 JavaFX 앱에서 Firebase 로그인을 완료하고, 이 때 발급되는 **Firebase ID Token**을 onLoginSuccess로 전달합니다.
