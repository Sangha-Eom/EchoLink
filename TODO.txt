1. application.yml을 비밀 처리 하여 어플 다운 시 딸려 나가지 않도록 수정.

2. 데스크탑 어플로 패키징(.exe) (서버 구축 마지막에)
ㄴ 서버와 인증서버 한 번에 실행하도록 구조 개편
ㄴ 나중에 해야할 사항 
  ㄴ 2단계: Fat JAR 빌드(사지방 CMD 이슈)
  ㄴ 4단계: 네이티브 빌드(.exe) (사지방CMD 이슈)


3. 로그인 기능 구현(프론트 엔드 요구)
현재: 앱이 실행되는 동안에만 회원 정보가 임시로 유지. 
ㄴ (프론트엔드) 로그인 완료 시 Parsec과 같이 연결 할 기기들이 뜨는 창으로 이동
근본적인 문제 및 추천 해결책
사실 위 오류들을 모두 해결하더라도, 현재의 접근 방식에는 더 근본적인 문제가 있습니다.
현재 코드는 Google API 사용을 위한 Credential을 얻는 과정이며, 우리가 최종적으로 필요한 Firebase의 ID Token을 직접 반환하지 않습니다.

Credential 객체에서 Firebase 인증에 필요한 토큰을 추출하고 교환하는 과정은 매우 복잡합니다. 따라서 더 간단하고 표준적인 Firebase Custom Token 방식으로 전환하는 것을 강력히 권장합니다.

추천 흐름:
1. (JavaFX): 이전 단계의 코드(flow.newTokenRequest...)를 통해 Google의 Credential을 성공적으로 받아옵니다.
2. (JavaFX): 이 Credential에서 Google 사용자의 **ID Token**을 추출합니다.
3. (JavaFX → 서버): 이 **Google ID Token**을 Spring Boot 서버의 특정 API 엔드포인트(예: /api/auth/firebase-signin)로 전송합니다.
4. (서버): 서버는 Firebase Admin SDK를 사용하여 수신된 Google ID Token이 유효한지 검증합니다.
5. (서버): 검증이 성공하면, Admin SDK는 해당 사용자에 대한 Firebase Custom Token을 생성하여 클라이언트(JavaFX)에게 다시 돌려줍니다.
6. (JavaFX): 최종적으로 FirebaseAuth.getInstance().signInWithCustomToken(customToken)을 호출하여 JavaFX 앱에서 Firebase 로그인을 완료하고, 
  이 때 발급되는 **Firebase ID Token**을 onLoginSuccess로 전달합니다.




4. 클라이언트 구현 (서버 구축 후)
현재: 서버 구축 후 한번에 시작
ㄴ MainActivity.java를 토대로 시작
