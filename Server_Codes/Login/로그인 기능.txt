- 인증 아키텍처
[ Android 클라이언트 ] <------> [  인증 웹 서버 (신규)  ] <------> [ Java 데스크톱 서버 ]
      (로그인 요청)                 (OAuth 2.0 처리)               (인증 상태 확인)
                             (Google, Naver, Kakao 등 연동)

----
Fst. 인증 웹 서버 구축(Spring Boot) <ongoing>
Spring Boot: Spring Security -> OAuth 2.0 지원 사용

역할:
1. 로그인 요청을 받으면 사용자를 Google 등 소셜 로그인 페이지로 리디렉션합니다.
2. 로그인 성공 후, 소셜 서비스로부터 인증 정보를 받아옵니다.
3. 인증이 완료된 사용자를 식별하는 고유한 토큰(JWT - JSON Web Token)을 생성하여 발급합니다.

----
Snd. 데스크톱 서버 로직 수정
인증 웹 서버와 통신하여 자신의 "인증 상태"를 확인

수정 방향:
1. 최초 실행 시:
  a. 데스크톱 앱이 실행.
  b. 인증 웹 서버에 "기기 등록"을 요청.
  c. 고유한 인증 코드(예: A1B2-C3D4)를 발급 받기.
  d. 화면에 https://인증서버.com/device 와 같은 URL과 함께 발급받은 인증 코드를 보여줍니다. 
    (또는 해당 URL을 자동으로 브라우저에서 열어줍니다.)

2. 인증 대기:
  사용자가 웹 브라우저에서 소셜 로그인과 기기 코드 입력을 완료할 때까지, 
  데스크톱 앱은 주기적으로 인증 웹 서버에 "인증 완료 여부"를 문의(Polling)

3. 인증 완료:
  인증이 완료되면, 인증 웹 서버로부터 이 데스크톱 앱을 위한 JWT를 발급받아 내부에 저장
  
  AuthManager 역할 변경: 기존 AuthManager는 ID/PW를 검증했지만, 
  이제는 클라이언트(모바일)가 연결 시 제시하는 JWT가 유효한 토큰인지 검증하는 역할로 변경

----
Trd. 안드로이드 클라이언트 로직 수정
안드로이드 클라이언트 역시 인증 웹 서버를 통해 로그인하고 JWT를 발급 받음.

수정 방향:
1. 앱에서 "Google로 로그인" 버튼을 누르면, 웹뷰나 커스텀 탭을 통해 인증 웹 서버의 로그인 페이지를 엽니다.
2. 로그인 성공 후, 인증 웹 서버로부터 발급받은 JWT를 안전하게 저장합니다.
3. 데스크톱 서버에 스트리밍 연결을 요청할 때, 이 JWT를 HTTP 헤더나 최초 연결 메시지에 포함하여 전송합니다.
